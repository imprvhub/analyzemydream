---
import Layout from '../layouts/Layout.astro'
import Hero from '../components/blocks/hero/PageHeader.astro'

const SEO = {
    title: 'AnalyzeMyDream | API Reference & Documentation',
    description:
        'Explore the comprehensive API reference and documentation for AnalyzeMyDream. This resource provides detailed guidance on utilizing our API efficiently and integrating it seamlessly into your applications.'
};

const header = {
    title: '<strong>API</strong> Reference & Documentation',
    text: 'Explore the AnalyzeMyDream API Reference. Access essential details to seamlessly integrate our API into your projects with our straightforward documentation.'
};
---

<Layout title={SEO.title} description={SEO.description}>
    <Hero title={header.title} text={header.text} />

    <div class="container">  
        <aside class="sidebar">
            <nav>
                <ul class="menu">
                    <li class="menu-item-base-url">
                        <a href="https://analyzemydream.com/api">
                            <span class="base-url-button">BASE URL</span>
                            <span class="title">AnalyzeMyDream API</span>
                            <span class="path"><strong style="color: #fff;">https://analyzemydream-api.vercel.app</strong></span>
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>
        <aside class="sidebar" style="margin-top:10px;">
            <nav>
                <ul class="menu">
                    <li class="menu-item">
                        <a href="#get-dream-article">
                            <span class="endpoint-get">GET</span>
                            <span class="title">Get Dream Meanings</span>
                            <span class="path"><strong style="color: #4FC9B0;">/dream/&lbrace;api_key&rcub;/&lbrace;lang&rcub;/&lbrace;category&rcub;/&lbrace;slug&rcub;</strong></span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="#fast-ai-dream-analyzer">
                            <span class="endpoint-post">POST</span>
                            <span class="title">Fast-AI Dream Analyzer</span>
                            <span class="path"><strong style="color: #579CD6;">/analyzer/&lbrace;api_key&rcub;</strong></span>
                        </a>
                    </li>
                    <li class="menu-item">
                        <a href="#ai-advanced-dream-analyzer">
                            <span class="endpoint-post">POST</span>
                            <span class="title">Advanced-AI Dream Analyzer</span>
                            <span class="path"><strong style="color: #579CD6;">/advanced-analyzer/&lbrace;api_key&rcub;</strong></span>
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>
    </div>
    <br>


    <div class="custom-button-container">
      <a class="custom-button" href="https://www.postman.com/ivanluna-dev/workspace/analyzemydream-api/collection/34121786-f44857be-4132-47ce-834d-06bc2d077f17?action=share&creator=34121786&active-environment=34121786-75f8525e-4139-430e-899d-10cc32b0efcb" target="_blank">
        Run in Postman
      </a>
      <a class="custom-button" href="https://insomnia.rest/run/?label=AnalyzeMyDream%20API&uri=https%3A%2F%2Fanalyzemydream.com%2Fjson%2Finsomnia-analyzemydream.json" target="_blank">
        Run in Insomnia
      </a>
    </div>
    <br>
    <br>
    <!-- API Key Request Form -->
    <article id="api-key-form" class="api-endpoint">
        <h2 class="endpoint-title" style="border-bottom: 2px solid #7BC7C7; color: #94A3B8;">Request API Key</h2>
        <p>To obtain your API key, please enter your email address below. We will send you an API key to the provided email.</p>
        
        <form id="apiForm" class="space-y-4">
            <div class="flex justify-center items-center h-full">
                <input
                    id="emailAddress"
                    name="emailAddress"
                    type="email"
                    required
                    class="w-full p-2 border border-gray-300 rounded"
                    style="max-width:50%;font-size: 14px; background-color:transparent; color:#94A3B8;"
                    placeholder="Enter your email address..."
                />
            </div>
            
            <div class="flex justify-center space-x-4 mt-4">
                <button
                    id="obtainApiKeyButton"
                    type="submit"
                    class="relative flex items-center justify-center text-white py-2 px-4 rounded-lg hover:bg-blue-600"
                    style="background-color: rgba(123, 199, 199, var(--tw-bg-opacity));"
                >
                    <span id="buttonText" style="font-weight: 700; font-size: 0.875rem;">Obtain API Key</span>
                </button>
            </div>
            <p id="responseMessage" class="mt-4" style="text-align: center; font-weight:800;"></p>
        </form>
    </article>
    <br>
    <main class="documentation-content">
        <article id="get-dream-article" class="api-endpoint">
            <h2 class="endpoint-title" style="border-bottom: 2px solid #4EC2AB; color: #94A3B8;">Get Dream Meanings</h2>
            <p><strong>Method:</strong> <span class="highlight-method">GET</span></p>
            <p><strong>Endpoint:</strong> <span class="url-api-get">https://analyzemydream-api.vercel.app/dream/&lbrace;api_key&rcub;&lbrace;lang&rcub;&lbrace;category&rcub;&lbrace;slug&rcub;</span>
            <p><strong>Description:</strong> <span class="highlight-description">Retrieves a dream article based on the language, category, and article identifier.</span></p>

            <h3>Path Parameters</h3>
            <ul class="parameters-list">
                <li><strong class="parameters-li-green">api_key (required):</strong> API Key Auth (e.g., <em><strong>AMD_</strong>...</em>)</li>
                <li><strong class="parameters-li-green">lang (required):</strong> Language of the article (e.g., <em><strong>English</strong>, <strong>Portuguese</strong>, <strong>Spanish</strong></em>)</li>
                <li><strong class="parameters-li-green">category (required):</strong> Category of the dream (e.g., <em><strong>Animals</strong>, <strong>People</strong></em>)</li>
                <li><strong class="parameters-li-green">slug (required):</strong> Unique identifier of the article (e.g., <em><strong>what-does-it-mean-to-dream-about-work</strong></em>)</li>
            </ul>

            <div class="container-api">
              <h3>Request Body</h3>
              <pre id="jsonBodyGet"></pre>
            </div>

            <div class="container-api">
              <h3>Code Snippet</h3>
              <div class="response-example" style="border-left: 4px solid #68CFB9;">
                  <p><strong>Select a language:</strong></p>
              <select id="languageGet" style="border: 2px #68CFB9 solid; !important">
                  <option value="csharp-httpclient" selected>C# - HttpClient</option>
                  <option value="csharp-restsharp">C# - RestSharp</option>
                  <option value="curl">CURL</option>
                  <option value="dart-dio">Dart - dio</option>
                  <option value="dart-http">Dart - http</option>
                  <option value="go-native">Go - Native</option>
                  <option value="http">HTTP</option>
                  <option value="java-okhttp">Java - OkHttp</option>
                  <option value="java-unirest">Java - Unirest</option>
                  <option value="javascript-fetch">JavaScript - Fetch</option>
                  <option value="javascript-jquery">JavaScript - jQuery</option>
                  <option value="javascript-xhr">JavaScript - XHR</option>
                  <option value="kotlin-okhttp">Kotlin - OkHttp</option>
                  <option value="c-libcurl">C - libcurl</option>
                  <option value="nodejs-axios">NodeJs - Axios</option>
                  <option value="nodejs-native">NodeJs - Native</option>
                  <option value="nodejs-request">NodeJs - Request</option>
                  <option value="nodejs-unirest">NodeJs - Unirest</option>
                  <option value="objectivec-nsurlsession">Objective-C - NSURLSession</option>
                  <option value="php-curl">PHP - CURL</option>
                  <option value="php-guzzle">PHP - Guzzle</option>
                  <option value="php-http-request2">PHP - HTTP_Request2</option>
                  <option value="php-pecl-http">PHP - pecl_http</option>
                  <option value="powershell-restmethod">PowerShell - RestMethod</option>
                  <option value="python-httpclient">Python - http.client</option>
                  <option value="python-requests">Python - Requests</option>
                  <option value="r-httr">R - httr</option>
                  <option value="r-rcurl">R - RCurl</option>
                  <option value="ruby">Ruby - Net::HTTP</option>
                  <option value="rust-reqwest">Rust - reqwest</option>
                  <option value="shell-httpie">Shell - Httpie</option>
                  <option value="shell-wget">Shell - wget</option>
                  <option value="swift-urlsession">Swift - URLSession</option>
              </select>
                
                <img id="copyIconGet" class="copy-icon" src="https://analyzemydream.com/assets/copy-green.png" alt="Copy Green Icon">
              
              <pre id="codeExampleGet"></pre>
          </div>

            <h3>Responses</h3>
            <p><strong>200 OK:</strong></p>
            <div class="response-example" style="border-left: 4px solid #48B09E;">
                <p><strong>Response Body:</strong></p>


                <div class="json-example">
                    <p class="example-json"><strong>Example JSON:</strong></p>
                    <pre class="json-content">
    &#123;
        "title": "Article Title",
        "pubDate": "2024-08-16",
        "description": "Description of the dream article.",
        "author": "Author Name",
        "image": "https://analyzemydream.com/article-image.png",
        "tags": ["dream", "meanings"],
        "content": "Full content of the dream article."
    &#125;
                    </pre>
                </div>
            </div>
    
            <p><strong>422 Validation Error:</strong></p>
            <div class="response-example" style="border-left: 4px solid #48B09E;">
                <p><strong>Response Body:</strong></p>
                <div class="json-example">
                    <p class="example-json"><strong>Example JSON:</strong></p>
                    <pre class="json-content">
    &#123;
        "detail": [
            &#123;
                "loc": ["path", "lang"],
                "msg": "field required",
                "type": "value_error.missing"
            &#125;
        ]
    &#125;
                    </pre>
                </div>
            </div>
        </article>
        <br>
        <article id="fast-ai-dream-analyzer" class="api-endpoint">
            <h2 class="endpoint-title" style="border-bottom: 2px solid #579CD6; color: #94A3B8;">Fast-AI Dream Analyzer</h2>
            <p><strong>Method:</strong> <span style="font-weight: bold; color: #579CD6;">POST</span></p>
            <p><strong>Endpoint:</strong> <span class="url-api-fast">https://analyzemydream-api.vercel.app/analyzer/&lbrace;api_key&rcub;</span>
            <p><strong>Description:</strong> <span>Analyze a dream by providing a description, and the Fast-AI Analyzer returns a quick interpretation.</span></p>
            <h3>Path Parameters</h3>
            <ul class="parameters-list">
              <li><strong class="parameters-li-blue">api_key (required):</strong> API Key Auth (e.g., <em><strong>AMD_</strong>...</em>)</li>
              <li><strong class="parameters-li-blue">dream_description (required):</strong> A detailed description of the dream (minimum 30 words)</li>
              <li><strong class="parameters-li-blue">lang (required):</strong> Language code (e.g., <em><strong>en</strong>, <strong>pt</strong>, <strong>es</strong></em>)</li>
            </ul>
            <div class="container-api">
                <h3>Request Body</h3>
                <pre id="jsonBodyFast"></pre>
            </div>
            
            <div class="container-api">
                <h3>Code Snippet</h3>
                <div class="response-example" style="border-left: 4px solid #579CD6;">
                    <p><strong>Select a language:</strong></p>
                <select id="language">
                    <option value="csharp-httpclient" selected>C# - HttpClient</option>
                    <option value="csharp-restsharp">C# - RestSharp</option>
                    <option value="curl">CURL</option>
                    <option value="dart-dio">Dart - dio</option>
                    <option value="dart-http">Dart - http</option>
                    <option value="go-native">Go - Native</option>
                    <option value="http">HTTP</option>
                    <option value="java-okhttp">Java - OkHttp</option>
                    <option value="java-unirest">Java - Unirest</option>
                    <option value="javascript-fetch">JavaScript - Fetch</option>
                    <option value="javascript-jquery">JavaScript - jQuery</option>
                    <option value="javascript-xhr">JavaScript - XHR</option>
                    <option value="kotlin-okhttp">Kotlin - OkHttp</option>
                    <option value="c-libcurl">C - libcurl</option>
                    <option value="nodejs-axios">NodeJs - Axios</option>
                    <option value="nodejs-native">NodeJs - Native</option>
                    <option value="nodejs-request">NodeJs - Request</option>
                    <option value="nodejs-unirest">NodeJs - Unirest</option>
                    <option value="objectivec-nsurlsession">Objective-C - NSURLSession</option>
                    <option value="php-curl">PHP - CURL</option>
                    <option value="php-guzzle">PHP - Guzzle</option>
                    <option value="php-http-request2">PHP - HTTP_Request2</option>
                    <option value="php-pecl-http">PHP - pecl_http</option>
                    <option value="powershell-restmethod">PowerShell - RestMethod</option>
                    <option value="python-httpclient">Python - http.client</option>
                    <option value="python-requests">Python - Requests</option>
                    <option value="r-httr">R - httr</option>
                    <option value="r-rcurl">R - RCurl</option>
                    <option value="ruby">Ruby - Net::HTTP</option>
                    <option value="rust-reqwest">Rust - reqwest</option>
                    <option value="shell-httpie">Shell - Httpie</option>
                    <option value="shell-wget">Shell - wget</option>
                    <option value="swift-urlsession">Swift - URLSession</option>
                </select>
                <img id="copyIcon" class="copy-icon" src="https://analyzemydream.com/assets/copy-blue.png" alt="Copy Blue Fast">
                 
                <pre id="codeExample"></pre>
            </div>

    
            <h3>Responses</h3>
            <p><strong>200 OK:</strong></p>
            <div class="response-example" style="border-left: 4px solid #579CD6;">
                <p><strong>Response Body:</strong></p>
                <div class="json-example-post">
                    <p class="example-json"><strong>Example JSON:</strong></p>
                    <pre class="json-content">
                      &#123;
                              "analysis": 
                              "Dreaming of swimming in a crystal-clear ocean with colorful fish is a beautiful and positive dream with several potential interpretations: General Meaning:  Peace and tranquility: The clear ocean water symbolizes a sense of calm and serenity. You may be feeling emotionally balanced and at peace in your waking life.  Joy and abundance: The vibrant fish represent joy, happiness, and possibly even good fortune. They could symbolize opportunities or blessings coming your way. Emotional freedom: Swimming in the ocean can be a symbol of letting go of burdens and embracing your emotions freely. You might be experiencing a period of emotional liberation. Possible Specific Meanings:  Connection to your emotions: The ocean represents your subconscious mind and emotions. The fish could symbolize your thoughts, feelings, or even dreams.  Personal growth: The journey through the ocean might represent a period of personal growth and transformation. You're moving forward in life and exploring new depths within yourself. Exploration and adventure: The vibrant fish and clear water could also symbolize a desire for exploration and adventure. You may be longing for new experiences and a change of pace. Remember: Dream interpretation is personal and subjective. The best way to understand your dream is to consider its specific details and how it made you feel. To further analyze your dream, consider:  The size and behavior of the fish: Were they friendly or aggressive? Did they seem happy or scared? The color of the fish: Different colors have different symbolic meanings.  Any other objects or elements in the dream: Did you see any coral, seaweed, or other marine life? By reflecting on these details, you can gain a deeper understanding of what your dream is trying to tell you."
                      &#125;
                    </pre>
                </div>
            </div>
    
            <p><strong>422 Validation Error:</strong></p>
            <div class="response-example" style="border-left: 4px solid #579CD6;">
                <p><strong>Response Body:</strong></p>
                <div class="json-example-post">
                    <p class="example-json"><strong>Example JSON:</strong></p>
                    <pre class="json-content">
    &#123;
        "detail": [
            &#123;
                "loc": ["body", "dream_description"],
                "msg": "Ensure the description has at least 30 words.",
                "type": "value_error"
            &#125;,
            &#123;
                "loc": ["body", "lang"],
                "msg": "Input should be 'en', 'pt' or 'es'",
                "input": "fr",
                "ctx": &#123; "expected": "'en', 'pt' or 'es'" &#125;
            &#125;
        ]
    &#125;
                    </pre>
                </div>
            </div>
        </article>
        <br>
        <article id="ai-advanced-dream-analyzer" class="api-endpoint">
            <h2 class="endpoint-title" style="border-bottom: 2px solid #579CD6; color: #94A3B8;">AI-Advanced Dream Analyzer</h2>
            <p><strong>Method:</strong> <span style="font-weight: bold; color: #579CD6;">POST</span></p>
            <p><strong>Endpoint:</strong><p><strong>Endpoint:</strong> <span class="url-api-fast">https://analyzemydream-api.vercel.app/advanced-analyzer/&lbrace;api_key&rcub;</span>
            <p><strong>Description:</strong> <span>Analyze a dream with Advanced-AI, delivering a comprehensive interpretation based on predefined criteria such as type, importance, emotions, context, and more.</span></p>

            <h3>Request Body</h3>
            <ul class="parameters-list">
                <li><strong class="parameters-li-blue">api_key (required):</strong> API Key Auth (e.g., <em><strong>AMD_</strong>...</em>)</li>
                <li><strong class="parameters-li-blue">dream_description (required):</strong> A detailed description of the dream (minimum 30 words)</li>
                <li><strong class="parameters-li-blue">dream_type (optional):</strong> Type of the dream (e.g., <em><strong>Experienced</strong>, <strong>Lucid</strong>, <strong>Blurred</strong>, <strong>N/A</strong></em>)</li>
                <li><strong class="parameters-li-blue">dream_importance (optional):</strong> Importance of the dream (e.g., <em><strong>Insignificant</strong>, <strong>Neutral</strong>, <strong>Very Important</strong>, <strong>N/A</strong></em>)</li>
                <li><strong class="parameters-li-blue">main_emotions (optional):</strong> Main emotions experienced in the dream (e.g., <em><strong>Happiness</strong>, <strong>Sadness</strong>, <strong>Fear</strong>, <strong>Anxiety</strong>, <strong>Anger</strong>, <strong>N/A</strong></em>)</li>
                <li><strong class="parameters-li-blue">dream_context (optional):</strong> Context of the dream (e.g., <em><strong>Familiar</strong>, <strong>Unknown</strong>, <strong>Natural Environment</strong>, <strong>Urban Environment</strong>, <strong>N/A</strong></em>)</li>
                <li><strong class="parameters-li-blue">dream_state (optional):</strong> State after the dream (e.g., <em><strong>Refreshed</strong>, <strong>Tired</strong>, <strong>Confused</strong>, <strong>Indifferent</strong>, <strong>N/A</strong></em>)</li>
                <li><strong class="parameters-li-blue">dream_frequency (optional):</strong> Frequency of similar dreams (e.g., <em><strong>Rarely</strong>, <strong>Occasionally</strong>, <strong>Frequently</strong>, <strong>Always</strong>, <strong>N/A</strong></em>)</li>
                <li><strong class="parameters-li-blue">dream_expectations (optional):</strong> Expectations from the dream (e.g., <em><strong>Problem Resolution</strong>, <strong>Personal Insight</strong>, <strong>Warnings</strong>, <strong>Entertainment</strong>, <strong>N/A</strong></em>)</li>
            </ul>

            <div class="container-api">
              <h3>Request Body</h3>
              <pre id="jsonBodyAdvanced"></pre>
            </div>

            <div class="container-api">
              <h3>Code Snippet</h3>
              <div class="response-example" style="border-left: 4px solid #579CD6;">
                  <p><strong>Select a language:</strong></p>
              <select id="languageAdvanced">
                  <option value="csharp-httpclient" selected>C# - HttpClient</option>
                  <option value="csharp-restsharp">C# - RestSharp</option>
                  <option value="curl">CURL</option>
                  <option value="dart-dio">Dart - dio</option>
                  <option value="dart-http">Dart - http</option>
                  <option value="go-native">Go - Native</option>
                  <option value="http">HTTP</option>
                  <option value="java-okhttp">Java - OkHttp</option>
                  <option value="java-unirest">Java - Unirest</option>
                  <option value="javascript-fetch">JavaScript - Fetch</option>
                  <option value="javascript-jquery">JavaScript - jQuery</option>
                  <option value="javascript-xhr">JavaScript - XHR</option>
                  <option value="kotlin-okhttp">Kotlin - OkHttp</option>
                  <option value="c-libcurl">C - libcurl</option>
                  <option value="nodejs-axios">NodeJs - Axios</option>
                  <option value="nodejs-native">NodeJs - Native</option>
                  <option value="nodejs-request">NodeJs - Request</option>
                  <option value="nodejs-unirest">NodeJs - Unirest</option>
                  <option value="objectivec-nsurlsession">Objective-C - NSURLSession</option>
                  <option value="php-curl">PHP - CURL</option>
                  <option value="php-guzzle">PHP - Guzzle</option>
                  <option value="php-http-request2">PHP - HTTP_Request2</option>
                  <option value="php-pecl-http">PHP - pecl_http</option>
                  <option value="powershell-restmethod">PowerShell - RestMethod</option>
                  <option value="python-httpclient">Python - http.client</option>
                  <option value="python-requests">Python - Requests</option>
                  <option value="r-httr">R - httr</option>
                  <option value="r-rcurl">R - RCurl</option>
                  <option value="ruby">Ruby - Net::HTTP</option>
                  <option value="rust-reqwest">Rust - reqwest</option>
                  <option value="shell-httpie">Shell - Httpie</option>
                  <option value="shell-wget">Shell - wget</option>
                  <option value="swift-urlsession">Swift - URLSession</option>
              </select>
              <img id="copyIconAdvanced" class="copy-icon" src="https://analyzemydream.com/assets/copy-blue.png" alt="Copy Green Advanced">
              <pre id="codeExampleAdvanced"></pre>
          </div>

    
            <h3>Responses</h3>
            <p><strong>200 OK:</strong></p>
            <div class="response-example" style="border-left: 4px solid #579CD6;">
                <p><strong>Response Body:</strong></p>
                <div class="json-example-post">
                    <p class="example-json"><strong>Example JSON:</strong></p>
                    <pre class="json-content">
                      &#123;
                      "analysis": 
                      "Your dream of a bustling office environment reflects your own drive and ambition. The hum of activity and the sense of purpose you felt in the dream suggest you are currently motivated and focused on your goals. The pressure of deadlines and the feeling of accomplishment indicate that you're actively engaged in challenging tasks and are seeing the fruits of your labor. The collaborative aspect of your dream underscores the importance of teamwork in achieving success. You may be feeling particularly connected to your colleagues or collaborators in your waking life, recognizing the value of their contributions to your work.  Overall, this dream is a positive reflection of your current mindset and aspirations. It suggests you're driven, focused, and value the collaborative nature of professional success. Here are some further considerations:  Specific details: Did you recognize any of the colleagues in your dream? Did the project have a specific theme or goal? These details might provide additional clues about your subconscious thoughts and anxieties. Your current life: How does this dream relate to your current work life? Are you experiencing any particular challenges or triumphs that might be reflected in the dream? Personal interpretation: Ultimately, the most relevant interpretation of your dream is the one that resonates most with you personally. Consider how this dream makes you feel and what message it might be conveying to you. "
                      &#125;
                    </pre>
                </div>
            </div>
    
            <p><strong>422 Validation Error:</strong></p>
            <div class="response-example" style="border-left: 4px solid #579CD6;">
                <p><strong>Response Body:</strong></p>
                <div class="json-example-post">
                    <p class="example-json"><strong>Example JSON:</strong></p>
                    <pre class="json-content">
                      &#123;
                        "detail": [
                            &#123;
                                "loc": ["body", "dream_description"],
                                "msg": "Ensure the description has at least 30 words.",
                                "type": "value_error"
                            &#125;,
                            &#123;
                                "loc": ["body", "dream_type"],
                                "msg": "Invalid value. Expected one of: Experienced, Lucid, Blurred, N/A",
                                "input": "Fantasy",
                                "ctx": &#123; "expected": "Experienced, Lucid, Blurred, N/A" &#125;
                            &#125;
                        ]
                    &#125;
                    </pre>
                </div>
            </div>
        </article>
    </main>
    <br>
    <br>
    </div>
</Layout>
<script type="module">
    document.getElementById('apiForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        const obtainApiKeyButton = document.getElementById('obtainApiKeyButton');
        const buttonText = document.getElementById('buttonText');
        const emailAddress = document.getElementById('emailAddress');
        const responseMessage = document.getElementById('responseMessage');

        if (!obtainApiKeyButton || !buttonText || !emailAddress || !responseMessage) {
            console.error('One or more elements are missing.');
            return;
        }

        buttonText.textContent = 'Requesting...';
        obtainApiKeyButton.disabled = true;

        try {
            const response = await fetch('https://analyzemydream-api-key.vercel.app/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email: emailAddress.value }),
            });

            const result = await response.json();
            if (response.ok) {
                responseMessage.textContent = 'API key sent to your email!';
            } else {
                responseMessage.textContent = result.error || 'An error occurred. Please try again.';
            }
        } catch (error) {
            responseMessage.textContent = 'An error occurred. Please try again.';
        } finally {
            obtainApiKeyButton.disabled = false;
            buttonText.textContent = 'Obtain API Key';
        }
    });

  const jsonBodyFast = {
       "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
       "lang": "en",
   };

   const jsonBodyAdvanced = {
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}


   const jsonBodyGet = {
       "lang": "english",
       "category": "activities",
       "slug": "what-does-it-mean-to-dream-that-you-fly",
   };

   const jsonResponse = {
       
       "analysis": 
       "Dreaming of swimming in a crystal-clear ocean with colorful fish is a beautiful and positive dream with several potential interpretations: General Meaning:  Peace and tranquility: The clear ocean water symbolizes a sense of calm and serenity. You may be feeling emotionally balanced and at peace in your waking life.  Joy and abundance: The vibrant fish represent joy, happiness, and possibly even good fortune. They could symbolize opportunities or blessings coming your way. Emotional freedom: Swimming in the ocean can be a symbol of letting go of burdens and embracing your emotions freely. You might be experiencing a period of emotional liberation. Possible Specific Meanings:  Connection to your emotions: The ocean represents your subconscious mind and emotions. The fish could symbolize your thoughts, feelings, or even dreams.  Personal growth: The journey through the ocean might represent a period of personal growth and transformation. You're moving forward in life and exploring new depths within yourself. Exploration and adventure: The vibrant fish and clear water could also symbolize a desire for exploration and adventure. You may be longing for new experiences and a change of pace. Remember: Dream interpretation is personal and subjective. The best way to understand your dream is to consider its specific details and how it made you feel. To further analyze your dream, consider:  The size and behavior of the fish: Were they friendly or aggressive? Did they seem happy or scared? The color of the fish: Different colors have different symbolic meanings.  Any other objects or elements in the dream: Did you see any coral, seaweed, or other marine life? By reflecting on these details, you can gain a deeper understanding of what your dream is trying to tell you."

   };

   const codeExamplesGet = {
    "csharp-httpclient": `var client = new HttpClient();
var request = new HttpRequestMessage(HttpMethod.Get, 
  "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly");
var response = await client.SendAsync(request);
response.EnsureSuccessStatusCode();
Console.WriteLine(await response.Content.ReadAsStringAsync());`,

  "csharp-restsharp": `var options = new RestClientOptions("")
{
  MaxTimeout = -1,
};
var client = new RestClient(options);
var request = new RestRequest("https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly", Method.Get);
RestResponse response = await client.ExecuteAsync(request);
Console.WriteLine(response.Content);`,

  "curl": `curl --location 'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly'`,

  "dart-dio": `var dio = Dio();
var response = await dio.request(
  'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly',
  options: Options(
    method: 'GET',
  ),
);

if (response.statusCode == 200) {
  print(json.encode(response.data));
} else {
  print(response.statusMessage);
}`,

  "dart-http": `var request = http.Request('GET', Uri.parse('https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly'));

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
} else {
  print(response.reasonPhrase);
}`,

  "go-native": `package main

import (
  "fmt"
  "net/http"
  "io/ioutil"
)

func main() {
  url := "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly"
  method := "GET"

  client := &http.Client{}
  req, err := http.NewRequest(method, url, nil)

  if err != nil {
    fmt.Println(err)
    return
  }
  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}`,

  "http": `GET /dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly HTTP/1.1
Host: analyzemydream-api.vercel.app`,

  "java-okhttp": `OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
MediaType mediaType = MediaType.parse("text/plain");
RequestBody body = RequestBody.create(mediaType, "");
Request request = new Request.Builder()
  .url("https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly")
  .method("GET", body)
  .build();
Response response = client.newCall(request).execute();`,

  "java-unirest": `Unirest.setTimeouts(0, 0);
HttpResponse<String> response = Unirest.get("https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly")
  .asString();`,

  "javascript-fetch": `const requestOptions = {
  method: "GET",
  redirect: "follow"
};

fetch("https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly", requestOptions)
  .then((response) => response.text())
  .then((result) => console.log(result))
  .catch((error) => console.error(error));`,

  "javascript-jquery": `var settings = {
  "url": "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly",
  "method": "GET",
  "timeout": 0,
};

$.ajax(settings).done(function (response) {
  console.log(response);
});`,

  "javascript-xhr": `// WARNING: For GET requests, body is set to null by browsers.

var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("GET", "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly");

xhr.send();`,

  "kotlin-okhttp": `val client = OkHttpClient()
val request = Request.Builder()
  .url("https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly")
  .build()
val response = client.newCall(request).execute()`,

  "c-libcurl": `CURL *curl;
CURLcode res;
curl = curl_easy_init();
if(curl) {
  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "GET");
  curl_easy_setopt(curl, CURLOPT_URL, "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly");
  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
  struct curl_slist *headers = NULL;
  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
  res = curl_easy_perform(curl);
}
curl_easy_cleanup(curl);`,

  "nodejs-axios": `const axios = require('axios');

let config = {
  method: 'get',
  maxBodyLength: Infinity,
  url: 'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly',
  headers: { }
};

axios.request(config)
  .then((response) => {
    console.log(JSON.stringify(response.data));
  })
  .catch((error) => {
    console.log(error);
  });`,

  "nodejs-native": `var https = require('follow-redirects').https;
var fs = require('fs');

var options = {
  'method': 'GET',
  'hostname': 'analyzemydream-api.vercel.app',
  'path': '/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly',
  'headers': {},
  'maxRedirects': 20
};

var req = https.request(options, function (res) {
  var chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function (chunk) {
    var body = Buffer.concat(chunks);
    console.log(body.toString());
  });

  res.on("error", function (error) {
    console.error(error);
  });
});

req.end();`,

  "nodejs-request": `var request = require('request');
var options = {
  'method': 'GET',
  'url': 'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly',
  'headers': {}
};
request(options, function (error, response) {
  if (error) throw new Error(error);
  console.log(response.body);
});`,

  "nodejs-unirest": `var unirest = require('unirest');
var req = unirest('GET', 'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly')
  .end(function (res) { 
    if (res.error) throw new Error(res.error); 
    console.log(res.raw_body);
  });`,
    "objectivec-nsurlsession": `#import <Foundation/Foundation.h>

dispatch_semaphore_t sema = dispatch_semaphore_create(0);

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly"]
    cachePolicy:NSURLRequestUseProtocolCachePolicy
    timeoutInterval:10.0];

[request setHTTPMethod:@"GET"];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
    completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
        if (error) {
            NSLog(@"%@", error);
            dispatch_semaphore_signal(sema);
        } else {
            NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
            NSError *parseError = nil;
            NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];
            NSLog(@"%@", responseDictionary);
            dispatch_semaphore_signal(sema);
        }
    }];
[dataTask resume];
dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);`,

  "php-curl": `<?php

$curl = curl_init();

curl_setopt_array($curl, array(
    CURLOPT_URL => 'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly',
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => '',
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 0,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => 'GET',
));

$response = curl_exec($curl);

curl_close($curl);
echo $response;
`,

  "php-guzzle": `<?php
use GuzzleHttp\Client;

$client = new Client();
$request = new Request('GET', 'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly');
$res = $client->sendAsync($request)->wait();
echo $res->getBody();
`,

  "php-http-request2": `<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly');
$request->setMethod(HTTP_Request2::METHOD_GET);
$request->setConfig(array(
    'follow_redirects' => TRUE
));
try {
    $response = $request->send();
    if ($response->getStatus() == 200) {
        echo $response->getBody();
    } else {
        echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' . $response->getReasonPhrase();
    }
} catch (HTTP_Request2_Exception $e) {
    echo 'Error: ' . $e->getMessage();
}`,

  "php-pecl-http": `<?php
$client = new http\Client;
$request = new http\Client\Request;
$request->setRequestUrl('https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly');
$request->setRequestMethod('GET');
$request->setOptions(array());

$client->enqueue($request)->send();
$response = $client->getResponse();
echo $response->getBody();
`,

  "powershell-restmethod": `$response = Invoke-RestMethod 'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly' -Method 'GET' -Headers $headers
$response | ConvertTo-Json`,

  "python-httpclient": `import http.client

conn = http.client.HTTPSConnection("analyzemydream-api.vercel.app")
payload = ''
headers = {}
conn.request("GET", "/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))`,

  "python-requests": `import requests

url = "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly"

payload = {}
headers = {}

response = requests.request("GET", url, headers=headers, data=payload)

print(response.text)
`,

  "r-httr": `library(httr)

res <- VERB("GET", url = "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly")

cat(content(res, 'text'))`,

  "r-rcurl": `library(RCurl)

res <- getURL("https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly", .opts=list(followlocation = TRUE))
cat(res)`,

  "ruby": `require "uri"
require "net/http"

url = URI("https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly")

https = Net::HTTP.new(url.host, url.port)
https.use_ssl = true

request = Net::HTTP::Get.new(url)

response = https.request(request)
puts response.read_body
`,

  "rust-reqwest": `#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let client = reqwest::Client::builder()
        .build()?;

    let request = client.request(reqwest::Method::GET, "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly");

    let response = request.send().await?;
    let body = response.text().await?;

    println!("{}", body);

    Ok(())
}`,

  "shell-httpie": `http --follow --timeout 3600 GET 'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly'`,

  "shell-wget": `wget --no-check-certificate --quiet \
    --method GET \
    --timeout=0 \
    --header '' \
    'https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly'`,

  "swift-urlsession": `var request = URLRequest(url: URL(string: "https://analyzemydream-api.vercel.app/dream/{api_key}/english/activities/what-does-it-mean-to-dream-that-you-fly")!, timeoutInterval: Double.infinity)
request.httpMethod = "GET"

let task = URLSession.shared.dataTask(with: request) { data, response, error in 
    guard let data = data else {
        print(String(describing: error))
        return
    }
    print(String(data: data, encoding: .utf8)!)
}

task.resume()
`
};


   const codeExamples = {
       "csharp-httpclient": `var client = new HttpClient();
var request = new HttpRequestMessage(HttpMethod.Post, "https://analyzemydream-api.vercel.app/analyzer/{api_key}");
var content = new StringContent("{\n  \"dream_description\": \"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.\",\n  \"lang\": \"en\"\n}", null, "application/json");
request.Content = content;
var response = await client.SendAsync(request);
response.EnsureSuccessStatusCode();
Console.WriteLine(await response.Content.ReadAsStringAsync());`,

"csharp-restsharp": `var options = new RestClientOptions("")
{
  MaxTimeout = -1,
};
var client = new RestClient(options);
var request = new RestRequest("https://analyzemydream-api.vercel.app/analyzer/{api_key}", Method.Post);
request.AddHeader("Content-Type", "application/json");
var body = @"{
  ""dream_description"": ""I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish."",
  ""lang"": ""en""
}";
request.AddStringBody(body, DataFormat.Json);
RestResponse response = await client.ExecuteAsync(request);
Console.WriteLine(response.Content);`,

"curl": `curl --location 'https://analyzemydream-api.vercel.app/analyzer/{api_key}' \
--header 'Content-Type: application/json' \
--data '{
  "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  "lang": "en"
}'`,

"dart-dio": `var headers = {
  'Content-Type': 'application/json'
};
var data = json.encode({
  "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  "lang": "en"
});
var dio = Dio();
var response = await dio.request(
  'https://analyzemydream-api.vercel.app/analyzer/{api_key}',
  options: Options(
    method: 'POST',
    headers: headers,
  ),
  data: data,
);

if (response.statusCode == 200) {
  print(json.encode(response.data));
} else {
  print(response.statusMessage);
}`,

"dart-http": `var headers = {
  'Content-Type': 'application/json'
};
var request = http.Request('POST', Uri.parse('https://analyzemydream-api.vercel.app/analyzer/{api_key}'));
request.body = json.encode({
  "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  "lang": "en"
});
request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
} else {
  print(response.reasonPhrase);
}`,

"go-native": `package main

import (
  "fmt"
  "strings"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "https://analyzemydream-api.vercel.app/analyzer/{api_key}"
  method := "POST"

  payload := strings.NewReader('{"dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.", "lang": "en"}')

  client := &http.Client{}

  req, err := http.NewRequest(method, url, payload)
  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}`,

"java-okhttp": `OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\n  \"dream_description\": \"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.\",\n  \"lang\": \"en\"\n}");
Request request = new Request.Builder()
  .url("https://analyzemydream-api.vercel.app/analyzer/{api_key}")
  .method("POST", body)
  .addHeader("Content-Type", "application/json")
  .build();
Response response = client.newCall(request).execute();`,

"java-unirest": `Unirest.setTimeouts(0, 0);
HttpResponse<String> response = Unirest.post("https://analyzemydream-api.vercel.app/analyzer/{api_key}")
  .header("Content-Type", "application/json")
  .body("{\n  \"dream_description\": \"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.\",\n  \"lang\": \"en\"\n}")
  .asString();`,

"http": `POST /analyzer/{api_key} HTTP/1.1
Host: analyzemydream-api.vercel.app
Content-Type: application/json
Content-Length: 123

{
  "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  "lang": "en"
}`,

"javascript-fetch": `const myHeaders = new Headers();
myHeaders.append("Content-Type", "application/json");

const raw = JSON.stringify({
  "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  "lang": "en"
});

const requestOptions = {
  method: "POST",
  headers: myHeaders,
  body: raw,
  redirect: "follow"
};

fetch("https://analyzemydream-api.vercel.app/analyzer/{api_key}", requestOptions)
  .then((response) => response.text())
  .then((result) => console.log(result))
  .catch((error) => console.error(error));`,

"javascript-jquery": `var settings = {
  "url": "https://analyzemydream-api.vercel.app/analyzer/{api_key}",
  "method": "POST",
  "timeout": 0,
  "headers": {
    "Content-Type": "application/json"
  },
  "data": JSON.stringify({
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
  }),
};

$.ajax(settings).done(function (response) {
  console.log(response);
});`,

"javascript-xhr": `var data = JSON.stringify({
  "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  "lang": "en"
});

var xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener("readystatechange", function() {
  if(this.readyState === 4) {
    console.log(this.responseText);
  }
});

xhr.open("POST", "https://analyzemydream-api.vercel.app/analyzer/{api_key}");
xhr.setRequestHeader("Content-Type", "application/json");

xhr.send(data);`,

"kotlin-okhttp": `val client = OkHttpClient()
val mediaType = "application/json".toMediaType()
val body = "{\n  \"dream_description\": \"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.\",\n  \"lang\": \"en\"\n}".toRequestBody(mediaType)
val request = Request.Builder()
  .url("https://analyzemydream-api.vercel.app/analyzer/{api_key}")
  .post(body)
  .addHeader("Content-Type", "application/json")
  .build()
val response = client.newCall(request).execute()`,

"c-libcurl": `CURL *curl;
CURLcode res;
curl = curl_easy_init();
if(curl) {
  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
  curl_easy_setopt(curl, CURLOPT_URL, "https://analyzemydream-api.vercel.app/analyzer/{api_key}");
  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
  struct curl_slist *headers = NULL;
  headers = curl_slist_append(headers, "Content-Type: application/json");
  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
  const char *data = "{\n  \"dream_description\": \"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.\",\n  \"lang\": \"en\"\n}";
  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);
  res = curl_easy_perform(curl);
  curl_slist_free_all(headers);
}
curl_easy_cleanup(curl);`,

"nodejs-axios": `const axios = require('axios');
let data = JSON.stringify({
  "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  "lang": "en"
});

let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: 'https://analyzemydream-api.vercel.app/analyzer/{api_key}',
  headers: { 
    'Content-Type': 'application/json'
  },
  data: data
};

axios.request(config)
  .then((response) => {
    console.log(JSON.stringify(response.data));
  })
  .catch((error) => {
    console.log(error);
  });`,

"nodejs-native": `var https = require('follow-redirects').https;
var fs = require('fs');

var options = {
  'method': 'POST',
  'hostname': 'analyzemydream-api.vercel.app',
  'path': '/analyzer/{api_key}',
  'headers': {
    'Content-Type': 'application/json'
  },
  'maxRedirects': 20
};

var req = https.request(options, function (res) {
  var chunks = [];

  res.on("data", function (chunk) {
    chunks.push(chunk);
  });

  res.on("end", function (chunk) {
    var body = Buffer.concat(chunks);
    console.log(body.toString());
  });

  res.on("error", function (error) {
    console.error(error);
  });
});

var postData = JSON.stringify({
  "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  "lang": "en"
});

req.write(postData);
req.end();`,

"nodejs-request": `var request = require('request');
var options = {
  'method': 'POST',
  'url': 'https://analyzemydream-api.vercel.app/analyzer/{api_key}',
  'headers': {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
  })
};
request(options, function (error, response) {
  if (error) throw new Error(error);
  console.log(response.body);
});`,

"nodejs-unirest": `var unirest = require('unirest');
var req = unirest('POST', 'https://analyzemydream-api.vercel.app/analyzer/{api_key}')
  .headers({
    'Content-Type': 'application/json'
  })
  .send(JSON.stringify({
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
  }))
  .end(function (res) { 
    if (res.error) throw new Error(res.error); 
    console.log(res.raw_body);
  });`,

"objectivec-nsurlsession": `#import <Foundation/Foundation.h>

dispatch_semaphore_t sema = dispatch_semaphore_create(0);

NSURL *url = [NSURL URLWithString:@"https://analyzemydream-api.vercel.app/analyzer/{api_key}"];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
[request setHTTPMethod:@"POST"];
[request setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];

NSDictionary *jsonBodyDict = @{
  @"dream_description": @"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
  @"lang": @"en"
};
NSError *error;
NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonBodyDict options:0 error:&error];
[request setHTTPBody:jsonData];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
  if (error) {
    NSLog(@"Error: %@", error);
  } else {
    NSString *responseString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    NSLog(@"%@", responseString);
  }
  dispatch_semaphore_signal(sema);
}];

[task resume];
dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);`
,
"objectivec-nsurlsession": `#import <Foundation/Foundation.h>

dispatch_semaphore_t sema = dispatch_semaphore_create(0);

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://analyzemydream-api.vercel.app/analyzer/{api_key}"]
    cachePolicy:NSURLRequestUseProtocolCachePolicy
    timeoutInterval:10.0];
NSDictionary *headers = @{
    @"Content-Type": @"application/json"
};

[request setAllHTTPHeaderFields:headers];
NSData *postData = [[NSData alloc] initWithData:[@"{\n  \"dream_description\": \"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.\",\n  \"lang\": \"en\"\n}" dataUsingEncoding:NSUTF8StringEncoding]];
[request setHTTPBody:postData];

[request setHTTPMethod:@"POST"];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
    completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
        if (error) {
            NSLog(@"%@", error);
            dispatch_semaphore_signal(sema);
        } else {
            NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
            NSError *parseError = nil;
            NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];
            NSLog(@"%@",responseDictionary);
            dispatch_semaphore_signal(sema);
        }
    }];
[dataTask resume];
dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);`,

"php-curl": `<?php

$curl = curl_init();

curl_setopt_array($curl, array(
    CURLOPT_URL => 'https://analyzemydream-api.vercel.app/analyzer/{api_key}',
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => '',
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 0,
    CURLOPT_FOLLOWLOCATION => true,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => 'POST',
    CURLOPT_POSTFIELDS => '{
        "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
        "lang": "en"
    }',
    CURLOPT_HTTPHEADER => array(
        'Content-Type: application/json'
    ),
));

$response = curl_exec($curl);

curl_close($curl);
echo $response;`,

"php-guzzle": `<?php
$client = new Client();
$headers = [
    'Content-Type' => 'application/json'
];
$body = '{
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
}';
$request = new Request('POST', 'https://analyzemydream-api.vercel.app/analyzer/{api_key}', $headers, $body);
$res = $client->sendAsync($request)->wait();
echo $res->getBody();`,

"php-http-request2": `<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('https://analyzemydream-api.vercel.app/analyzer/{api_key}');
$request->setMethod(HTTP_Request2::METHOD_POST);
$request->setConfig(array(
    'follow_redirects' => TRUE
));
$request->setHeader(array(
    'Content-Type' => 'application/json'
));
$request->setBody('{
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
}');
try {
    $response = $request->send();
    if ($response->getStatus() == 200) {
        echo $response->getBody();
    } else {
        echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' . $response->getReasonPhrase();
    }
} catch(HTTP_Request2_Exception $e) {
    echo 'Error: ' . $e->getMessage();
}`,

"php-pecl-http": `<?php
$client = new http\Client;
$request = new http\Client\Request;
$request->setRequestUrl('https://analyzemydream-api.vercel.app/analyzer/{api_key}');
$request->setRequestMethod('POST');
$body = new http\Message\Body;
$body->append('{
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
}');
$request->setBody($body);
$request->setOptions(array());
$request->setHeaders(array(
    'Content-Type' => 'application/json'
));
$client->enqueue($request)->send();
$response = $client->getResponse();
echo $response->getBody();`,

"powershell-restmethod": `$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add("Content-Type", "application/json")

$body = @"
{
    '"dream_description'": '"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.'",
    '"lang'": '"en'"
}
"@

$response = Invoke-RestMethod 'https://analyzemydream-api.vercel.app/analyzer/{api_key}' -Method 'POST' -Headers $headers -Body $body
$response | ConvertTo-Json`,

"python-httpclient": `import http.client
import json

conn = http.client.HTTPSConnection("analyzemydream-api.vercel.app")
payload = json.dumps({
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
})
headers = {
    'Content-Type': 'application/json'
}
conn.request("POST", "/analyzer/{api_key}", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))`,

"python-requests": `import requests
import json

url = "https://analyzemydream-api.vercel.app/analyzer/{api_key}"

payload = json.dumps({
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
})
headers = {
    'Content-Type': 'application/json'
}

response = requests.request("POST", url, headers=headers, data=payload)

print(response.text)`,

"r-httr": `library(httr)

headers = c(
    'Content-Type' = 'application/json'
)

body = '{
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
}';

res <- VERB("POST", url = "https://analyzemydream-api.vercel.app/analyzer/{api_key}", body = body, add_headers(headers))

cat(content(res, 'text'))`,

"r-rcurl": `library(RCurl)
headers = c(
    "Content-Type" = "application/json"
)
params = "{
    \"dream_description\": \"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.\",
    \"lang\": \"en\"
}"
res <- postForm("https://analyzemydream-api.vercel.app/analyzer/{api_key}", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = "httppost")
cat(res)`,

"ruby": `require "uri"
require "json"
require "net/http"

url = URI("https://analyzemydream-api.vercel.app/analyzer/{api_key}")

https = Net::HTTP.new(url.host, url.port)
https.use_ssl = true

request = Net::HTTP::Post.new(url)
request["Content-Type"] = "application/json"
request.body = JSON.dump({
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
})

response = https.request(request)
puts response.read_body`,

"rust-reqwest": `#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let client = reqwest::Client::builder()
        .build()?;

    let mut headers = reqwest::header::HeaderMap::new();
    headers.insert("Content-Type", "application/json".parse()?);

    let data = r#"{
        "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
        "lang": "en"
    }"#;

    let json: serde_json::Value = serde_json::from_str(&data)?;

    let request = client.request(reqwest::Method::POST, "https://analyzemydream-api.vercel.app/analyzer/{api_key}")
        .headers(headers)
        .json(&json);

    let response = request.send().await?;
    let body = response.text().await?;

    println!("{}", body);

    Ok(())
}`,

"shell-httpie": `printf '{
    "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
    "lang": "en"
}' | http --follow --timeout 3600 POST 'https://analyzemydream-api.vercel.app/analyzer/{api_key}' \
    Content-Type:'application/json'`,
 "shell-wget": `wget --no-check-certificate --quiet \
    --method POST \
    --timeout=0 \
    --header 'Content-Type: application/json' \
    --body-data '{
        "dream_description": "I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.",
        "lang": "en"
    }' \
    'https://analyzemydream-api.vercel.app/analyzer/{api_key}'`,

"swift-urlsession": `let parameters = "{\n  \"dream_description\": \"I was swimming in a crystal-clear ocean, surrounded by vibrant, colorful fish.\",\n  \"lang\": \"en\"\n}"
let postData = parameters.data(using: .utf8)

var request = URLRequest(url: URL(string: "https://analyzemydream-api.vercel.app/analyzer/{api_key}")!, timeoutInterval: Double.infinity)
request.addValue("application/json", forHTTPHeaderField: "Content-Type")

request.httpMethod = "POST"
request.httpBody = postData

let task = URLSession.shared.dataTask(with: request) { data, response, error in 
    guard let data = data else {
        print(String(describing: error))
        return
    }
    print(String(data: data, encoding: .utf8)!)
}

task.resume()
`
}

const codeExamplesAdvanced = {
"csharp-httpclient": `var client = new HttpClient();
var request = new HttpRequestMessage(HttpMethod.Post, "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}");
var content = new StringContent("{\n  \"dream_description\": \"I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.\",\n  \"lang\": \"en\",\n  \"dream_type\": \"Lucid\",\n  \"dream_importance\": \"Very Important\",\n  \"main_emotions\": \"N/A\",\n  \"dream_context\": \"Unknown\",\n  \"dream_state\": \"Refreshed\",\n  \"dream_frequency\": \"Always\",\n  \"dream_expectations\": \"Personal Insight\"\n}\n", null, "application/json");
request.Content = content;
var response = await client.SendAsync(request);
response.EnsureSuccessStatusCode();
Console.WriteLine(await response.Content.ReadAsStringAsync());`,

"csharp-restsharp": `var options = new RestClientOptions("")
{
  MaxTimeout = -1,
};
var client = new RestClient(options);
var request = new RestRequest("https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}", Method.Post);
request.AddHeader("Content-Type", "application/json");
var body = @"{" + "\n" +
@"  ""dream_description"": ""I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.""," + "\n" +
@"  ""lang"": ""en""," + "\n" +
@"  ""dream_type"": ""Lucid""," + "\n" +
@"  ""dream_importance"": ""Very Important""," + "\n" +
@"  ""main_emotions"": ""N/A""," + "\n" +
@"  ""dream_context"": ""Unknown""," + "\n" +
@"  ""dream_state"": ""Refreshed""," + "\n" +
@"  ""dream_frequency"": ""Always""," + "\n" +
@"  ""dream_expectations"": ""Personal Insight""" + "\n" +
@"}" + "\n" +
@"";
request.AddStringBody(body, DataFormat.Json);
RestResponse response = await client.ExecuteAsync(request);
Console.WriteLine(response.Content);`,

"curl": `curl --location 'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}' \
--header 'Content-Type: application/json' \
--data '{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}'`,

"dart-dio": `var headers = {
  'Content-Type': 'application/json'
};
var data = json.encode({
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
});
var dio = Dio();
var response = await dio.request(
  'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}',
  options: Options(
    method: 'POST',
    headers: headers,
  ),
  data: data,
);

if (response.statusCode == 200) {
  print(json.encode(response.data));
}
else {
  print(response.statusMessage);
}`,

"dart-http": `var headers = {
  'Content-Type': 'application/json'
};
var request = http.Request('POST', Uri.parse('https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}'));
request.body = json.encode({
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
});
request.headers.addAll(headers);

http.StreamedResponse response = await request.send();

if (response.statusCode == 200) {
  print(await response.stream.bytesToString());
}
else {
  print(response.reasonPhrase);
}`,

"go-native": `package main

import (
  "fmt"
  "strings"
  "net/http"
  "io/ioutil"
)

func main() {

  url := "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}"
  method := "POST"

  payload := strings.NewReader(` + "`" + `{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}' + "'")

  client := &http.Client{}
  req, err := http.NewRequest(method, url, payload)

  if err != nil {
    fmt.Println(err)
    return
  }
  req.Header.Add("Content-Type", "application/json")

  res, err := client.Do(req)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer res.Body.Close()

  body, err := ioutil.ReadAll(res.Body)
  if err != nil {
    fmt.Println(err)
    return
  }
  fmt.Println(string(body))
}',

"http": 'POST /advanced-analyzer/{api_key} HTTP/1.1
Host: analyzemydream-api.vercel.app
Content-Type: application/json
Content-Length: 789

{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}`,
"java-okhttp": `OkHttpClient client = new OkHttpClient().newBuilder()
    .build();
  MediaType mediaType = MediaType.parse("application/json");
  RequestBody body = RequestBody.create(mediaType, "{\n  \"dream_description\": \"I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.\",\n  \"lang\": \"en\",\n  \"dream_type\": \"Lucid\",\n  \"dream_importance\": \"Very Important\",\n  \"main_emotions\": \"N/A\",\n  \"dream_context\": \"Unknown\",\n  \"dream_state\": \"Refreshed\",\n  \"dream_frequency\": \"Always\",\n  \"dream_expectations\": \"Personal Insight\"\n}\n");
  Request request = new Request.Builder()
    .url("https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}")
    .method("POST", body)
    .addHeader("Content-Type", "application/json")
    .build();
  Response response = client.newCall(request).execute();`,
  
  "java-unirest": `Unirest.setTimeouts(0, 0);
  HttpResponse<String> response = Unirest.post("https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}")
    .header("Content-Type", "application/json")
    .body("{\n  \"dream_description\": \"I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.\",\n  \"lang\": \"en\",\n  \"dream_type\": \"Lucid\",\n  \"dream_importance\": \"Very Important\",\n  \"main_emotions\": \"N/A\",\n  \"dream_context\": \"Unknown\",\n  \"dream_state\": \"Refreshed\",\n  \"dream_frequency\": \"Always\",\n  \"dream_expectations\": \"Personal Insight\"\n}\n")
    .asString();`,
  
  "javascript-fetch": `const myHeaders = new Headers();
  myHeaders.append("Content-Type", "application/json");

  const raw = JSON.stringify({
    "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
    "lang": "en",
    "dream_type": "Lucid",
    "dream_importance": "Very Important",
    "main_emotions": "N/A",
    "dream_context": "Unknown",
    "dream_state": "Refreshed",
    "dream_frequency": "Always",
    "dream_expectations": "Personal Insight"
  });

  const requestOptions = {
    method: "POST",
    headers: myHeaders,
    body: raw,
    redirect: "follow"
  };

  fetch("https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}", requestOptions)
    .then((response) => response.text())
    .then((result) => console.log(result))
    .catch((error) => console.error(error));`,
  
  "javascript-jquery": `var settings = {
    "url": "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}",
    "method": "POST",
    "timeout": 0,
    "headers": {
      "Content-Type": "application/json"
    },
    "data": JSON.stringify({
      "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
      "lang": "en",
      "dream_type": "Lucid",
      "dream_importance": "Very Important",
      "main_emotions": "N/A",
      "dream_context": "Unknown",
      "dream_state": "Refreshed",
      "dream_frequency": "Always",
      "dream_expectations": "Personal Insight"
    })
  };

  $.ajax(settings).done(function (response) {
    console.log(response);
  });`,
  
  "javascript-xhr": `// WARNING: For POST requests, body is set to null by browsers.
  var data = JSON.stringify({
    "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
    "lang": "en",
    "dream_type": "Lucid",
    "dream_importance": "Very Important",
    "main_emotions": "N/A",
    "dream_context": "Unknown",
    "dream_state": "Refreshed",
    "dream_frequency": "Always",
    "dream_expectations": "Personal Insight"
  });

  var xhr = new XMLHttpRequest();
  xhr.withCredentials = true;

  xhr.addEventListener("readystatechange", function() {
    if(this.readyState === 4) {
      console.log(this.responseText);
    }
  });

  xhr.open("POST", "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}");
  xhr.setRequestHeader("Content-Type", "application/json");

  xhr.send(data);`,
  
  "kotlin-okhttp": `val client = OkHttpClient()
  val mediaType = "application/json".toMediaType()
  val body = "{\n  \"dream_description\": \"I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.\",\n  \"lang\": \"en\",\n  \"dream_type\": \"Lucid\",\n  \"dream_importance\": \"Very Important\",\n  \"main_emotions\": \"N/A\",\n  \"dream_context\": \"Unknown\",\n  \"dream_state\": \"Refreshed\",\n  \"dream_frequency\": \"Always\",\n  \"dream_expectations\": \"Personal Insight\"\n}\n".toRequestBody(mediaType)
  val request = Request.Builder()
    .url("https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}")
    .post(body)
    .addHeader("Content-Type", "application/json")
    .build()
  val response = client.newCall(request).execute()`,
 "c-libcurl": `CURL *curl;
  CURLcode res;
  curl = curl_easy_init();
  if(curl) {
    curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
    curl_easy_setopt(curl, CURLOPT_URL, "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}");
    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
    curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
    struct curl_slist *headers = NULL;
    headers = curl_slist_append(headers, "Content-Type: application/json");
    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
    const char *data = "{\n  \"dream_description\": \"I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.\",\n  \"lang\": \"en\",\n  \"dream_type\": \"Lucid\",\n  \"dream_importance\": \"Very Important\",\n  \"main_emotions\": \"N/A\",\n  \"dream_context\": \"Unknown\",\n  \"dream_state\": \"Refreshed\",\n  \"dream_frequency\": \"Always\",\n  \"dream_expectations\": \"Personal Insight\"\n}\n";
    curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);
    res = curl_easy_perform(curl);
    curl_slist_free_all(headers);
  }
  curl_easy_cleanup(curl);`,
  
  "nodejs-axios": `const axios = require('axios');
  let data = JSON.stringify({
    "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
    "lang": "en",
    "dream_type": "Lucid",
    "dream_importance": "Very Important",
    "main_emotions": "N/A",
    "dream_context": "Unknown",
    "dream_state": "Refreshed",
    "dream_frequency": "Always",
    "dream_expectations": "Personal Insight"
  });

  let config = {
    method: 'post',
    maxBodyLength: Infinity,
    url: 'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}',
    headers: { 
      'Content-Type': 'application/json'
    },
    data: data
  };

  axios.request(config)
    .then((response) => {
      console.log(JSON.stringify(response.data));
    })
    .catch((error) => {
      console.log(error);
    });`,

  "nodejs-native": `var https = require('follow-redirects').https;
  var fs = require('fs');

  var options = {
    'method': 'POST',
    'hostname': 'analyzemydream-api.vercel.app',
    'path': '/advanced-analyzer/{api_key}',
    'headers': {
      'Content-Type': 'application/json'
    },
    'maxRedirects': 20
  };

  var req = https.request(options, function (res) {
    var chunks = [];

    res.on("data", function (chunk) {
      chunks.push(chunk);
    });

    res.on("end", function (chunk) {
      var body = Buffer.concat(chunks);
      console.log(body.toString());
    });

    res.on("error", function (error) {
      console.error(error);
    });
  });

  var postData = JSON.stringify({
    "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
    "lang": "en",
    "dream_type": "Lucid",
    "dream_importance": "Very Important",
    "main_emotions": "N/A",
    "dream_context": "Unknown",
    "dream_state": "Refreshed",
    "dream_frequency": "Always",
    "dream_expectations": "Personal Insight"
  });

  req.write(postData);
  req.end();`,

  "nodejs-request": `var request = require('request');
  var options = {
    'method': 'POST',
    'url': 'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}',
    'headers': {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
      "lang": "en",
      "dream_type": "Lucid",
      "dream_importance": "Very Important",
      "main_emotions": "N/A",
      "dream_context": "Unknown",
      "dream_state": "Refreshed",
      "dream_frequency": "Always",
      "dream_expectations": "Personal Insight"
    })
  };
  request(options, function (error, response) {
    if (error) throw new Error(error);
    console.log(response.body);
  });`,

  "nodejs-unirest": `var unirest = require('unirest');
  var req = unirest('POST', 'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}')
    .headers({
      'Content-Type': 'application/json'
    })
    .send(JSON.stringify({
      "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
      "lang": "en",
      "dream_type": "Lucid",
      "dream_importance": "Very Important",
      "main_emotions": "N/A",
      "dream_context": "Unknown",
      "dream_state": "Refreshed",
      "dream_frequency": "Always",
      "dream_expectations": "Personal Insight"
    }))
    .end(function (res) { 
      if (res.error) throw new Error(res.error); 
      console.log(res.raw_body);
    });`,
"objectivec-nsurlsession": `#import <Foundation/Foundation.h>

dispatch_semaphore_t sema = dispatch_semaphore_create(0);

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@"https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}"]
  cachePolicy:NSURLRequestUseProtocolCachePolicy
  timeoutInterval:10.0];
NSDictionary *headers = @{
  @"Content-Type": @"application/json"
};

[request setAllHTTPHeaderFields:headers];
NSData *postData = [[NSData alloc] initWithData:[@"{
  \"dream_description\": \"I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.\",
  \"lang\": \"en\",
  \"dream_type\": \"Lucid\",
  \"dream_importance\": \"Very Important\",
  \"main_emotions\": \"N/A\",
  \"dream_context\": \"Unknown\",
  \"dream_state\": \"Refreshed\",
  \"dream_frequency\": \"Always\",
  \"dream_expectations\": \"Personal Insight\"
}\n" dataUsingEncoding:NSUTF8StringEncoding]];
[request setHTTPBody:postData];

[request setHTTPMethod:@"POST"];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
  completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
    if (error) {
      NSLog(@"%@", error);
      dispatch_semaphore_signal(sema);
    } else {
      NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
      NSError *parseError = nil;
      NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];
      NSLog(@"%@", responseDictionary);
      dispatch_semaphore_signal(sema);
    }
  }];
[dataTask resume];
dispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);`,
"php-curl": `<?php

$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => 'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}',
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => '',
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => 'POST',
  CURLOPT_POSTFIELDS => '{
    "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
    "lang": "en",
    "dream_type": "Lucid",
    "dream_importance": "Very Important",
    "main_emotions": "N/A",
    "dream_context": "Unknown",
    "dream_state": "Refreshed",
    "dream_frequency": "Always",
    "dream_expectations": "Personal Insight"
  }',
  CURLOPT_HTTPHEADER => array(
    'Content-Type: application/json'
  ),
));

$response = curl_exec($curl);

curl_close($curl);
echo $response;
`,
"php-guzzle": `<?php
$client = new Client();
$headers = [
  'Content-Type' => 'application/json'
];
$body = '{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}';
$request = new Request('POST', 'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}', $headers, $body);
$res = $client->sendAsync($request)->wait();
echo $res->getBody();
`,
"php-http-request2": `<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}');
$request->setMethod(HTTP_Request2::METHOD_POST);
$request->setConfig(array(
  'follow_redirects' => TRUE
));
$request->setHeader(array(
  'Content-Type' => 'application/json'
));
$request->setBody('{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}');
try {
  $response = $request->send();
  if ($response->getStatus() == 200) {
    echo $response->getBody();
  } else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
  }
} catch (HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
}
`,
"php-pecl-http": `<?php
$client = new http\Client;
$request = new http\Client\Request;
$request->setRequestUrl('https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}');
$request->setRequestMethod('POST');
$body = new http\Message\Body;
$body->append('{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}
');
$request->setBody($body);
$request->setOptions(array());
$request->setHeaders(array(
  'Content-Type' => 'application/json'
));
$client->enqueue($request)->send();
$response = $client->getResponse();
echo $response->getBody();
`,

"powershell-restmethod": `$headers = New-Object "System.Collections.Generic.Dictionary[[String],[String]]"
$headers.Add("Content-Type", "application/json")

$body = @"
{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}
"@

$response = Invoke-RestMethod 'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}' -Method 'POST' -Headers $headers -Body $body
$response | ConvertTo-Json`,
  "python-httpclient": `import http.client
import json

conn = http.client.HTTPSConnection("analyzemydream-api.vercel.app")
payload = json.dumps({
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
})
headers = {
  'Content-Type': 'application/json'
}
conn.request("POST", "/advanced-analyzer/{api_key}", payload, headers)
res = conn.getresponse()
data = res.read()
print(data.decode("utf-8"))`,
  "python-requests": `import requests
import json

url = "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}"

payload = json.dumps({
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
})
headers = {
  'Content-Type': 'application/json'
}

response = requests.request("POST", url, headers=headers, data=payload)

print(response.text)`,
  "r-httr": `library(httr)

headers = c(
  'Content-Type' = 'application/json'
)

body = '{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
}'

res <- VERB("POST", url = "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}", body = body, add_headers(headers))

cat(content(res, 'text'))`,
  "r-rcurl": `library(RCurl)
headers = c(
  "Content-Type" = "application/json"
)
params = "{
  \"dream_description\": \"I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.\",
  \"lang\": \"en\",
  \"dream_type\": \"Lucid\",
  \"dream_importance\": \"Very Important\",
  \"main_emotions\": \"N/A\",
  \"dream_context\": \"Unknown\",
  \"dream_state\": \"Refreshed\",
  \"dream_frequency\": \"Always\",
  \"dream_expectations\": \"Personal Insight\"
}"
res <- postForm("https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = "httppost")
cat(res)`,
  "ruby": `require "uri"
require "json"
require "net/http"

url = URI("https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}")

https = Net::HTTP.new(url.host, url.port)
https.use_ssl = true

request = Net::HTTP::Post.new(url)
request["Content-Type"] = "application/json"
request.body = JSON.dump({
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
})

response = https.request(request)
puts response.read_body`,
  "rust-reqwest": `#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let client = reqwest::Client::builder()
        .build()?;

    let mut headers = reqwest::header::HeaderMap::new();
    headers.insert("Content-Type", "application/json".parse()?);

    let data = r#"{
      "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
      "lang": "en",
      "dream_type": "Lucid",
      "dream_importance": "Very Important",
      "main_emotions": "N/A",
      "dream_context": "Unknown",
      "dream_state": "Refreshed",
      "dream_frequency": "Always",
      "dream_expectations": "Personal Insight"
    }"#;

    let json: serde_json::Value = serde_json::from_str(&data)?;

    let request = client.request(reqwest::Method::POST, "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}")
        .headers(headers)
        .json(&json);

    let response = request.send().await?;
    let body = response.text().await?;

    println!("{}", body);

    Ok(())
}`,
"shell-httpie": `printf '{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
} 
' | http --follow --timeout 3600 POST 'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}' \
Content-Type:'application/json'`,
"shell-wget": `wget --no-check-certificate --quiet \
--method POST \
--timeout=0 \
--header 'Content-Type: application/json' \
--body-data '{
  "dream_description": "I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.",
  "lang": "en",
  "dream_type": "Lucid",
  "dream_importance": "Very Important",
  "main_emotions": "N/A",
  "dream_context": "Unknown",
  "dream_state": "Refreshed",
  "dream_frequency": "Always",
  "dream_expectations": "Personal Insight"
} 
' \
'https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}'`,
"swift-urlsession": `let parameters = "{\n  \"dream_description\": \"I found myself in a bustling office environment, surrounded by colleagues engaged in various tasks. The space was filled with the hum of activity and the clatter of keyboards. I was working on an important project, collaborating with a team to meet tight deadlines. Despite the stress, I felt a sense of accomplishment and purpose as I tackled challenges and contributed to the project’s success. The dream left me with a feeling of determination and a greater appreciation for teamwork and professional achievements.\",\n  \"lang\": \"en\",\n  \"dream_type\": \"Lucid\",\n  \"dream_importance\": \"Very Important\",\n  \"main_emotions\": \"N/A\",\n  \"dream_context\": \"Unknown\",\n  \"dream_state\": \"Refreshed\",\n  \"dream_frequency\": \"Always\",\n  \"dream_expectations\": \"Personal Insight\"\n}\n"
let postData = parameters.data(using: .utf8)

var request = URLRequest(url: URL(string: "https://analyzemydream-api.vercel.app/advanced-analyzer/{api_key}")!, timeoutInterval: Double.infinity)
request.addValue("application/json", forHTTPHeaderField: "Content-Type")

request.httpMethod = "POST"
request.httpBody = postData

let task = URLSession.shared.dataTask(with: request) { data, response, error in
  guard let data = data else {
    print(String(describing: error))
    return
  }
  print(String(data: data, encoding: .utf8)!)
}

task.resume()
`,
}

   function pulseElement(element) {
      element.classList.add('pulse');
      setTimeout(function() {
        element.classList.remove('pulse');
      }, 500); 
    }

    function showCopiedMessage(element) {
      var message = document.createElement("span");
      message.textContent = "Copied!";
      message.style.position = "absolute";
      message.style.right = "77px";
      message.style.top = "7.6rem";
      message.style.transform = "translateY(-50%)";
      message.style.fontSize = "13px"; 
      message.style.color = "#3398DC";
      message.style.fontWeight = "900"; 
      message.style.backgroundColor = "#0F172A"; 
      message.style.padding = "2px 5px"; 
      message.style.borderRadius = "3px"; 
      message.style.zIndex = "1";
      var container = element.parentElement;
      container.style.position = "relative"; 
      container.appendChild(message);
      setTimeout(function() {
        container.removeChild(message);
      }, 2000);
    }

    function showCopiedMessageGreen(element) {
      var message = document.createElement("span");
      message.textContent = "Copied!";
      message.style.position = "absolute";
      message.style.right = "77px";
      message.style.top = "7.6rem";
      message.style.transform = "translateY(-50%)";
      message.style.fontSize = "13px"; 
      message.style.color = "#69D0B9";
      message.style.fontWeight = "900"; 
      message.style.backgroundColor = "#0F172A"; 
      message.style.padding = "2px 5px"; 
      message.style.borderRadius = "3px"; 
      message.style.zIndex = "1";
      var container = element.parentElement;
      container.style.position = "relative"; 
      container.appendChild(message);
      setTimeout(function() {
        container.removeChild(message);
      }, 2000);
    }

    document.getElementById("copyIconGet").addEventListener("click", function() {
      var codeContent = document.getElementById("codeExampleGet").innerText;
      var tempTextArea = document.createElement("textarea");
      tempTextArea.value = codeContent;
      document.body.appendChild(tempTextArea);
      tempTextArea.select();
      document.execCommand("copy");
      document.body.removeChild(tempTextArea);
      pulseElement(this); 
      showCopiedMessageGreen(this);
    });

    document.getElementById("copyIcon").addEventListener("click", function() {
      var codeContent = document.getElementById("codeExample").innerText;
      var tempTextArea = document.createElement("textarea");
      tempTextArea.value = codeContent;
      document.body.appendChild(tempTextArea);
      tempTextArea.select();
      document.execCommand("copy");
      document.body.removeChild(tempTextArea);
      pulseElement(this); 
      showCopiedMessage(this);
    });

    document.getElementById("copyIconAdvanced").addEventListener("click", function() {
      var codeContent = document.getElementById("codeExampleAdvanced").innerText;
      var tempTextArea = document.createElement("textarea");
      tempTextArea.value = codeContent;
      document.body.appendChild(tempTextArea);
      tempTextArea.select();
      document.execCommand("copy");
      document.body.removeChild(tempTextArea);
      pulseElement(this); 
      showCopiedMessage(this);
    });



    document.getElementById("jsonBodyGet").textContent = JSON.stringify(jsonBodyGet, null, 2);
    document.getElementById("jsonBodyFast").textContent = JSON.stringify(jsonBodyFast, null, 2);
    document.getElementById("jsonBodyAdvanced").textContent = JSON.stringify(jsonBodyAdvanced, null, 2);

    function updateCodeExampleGet() {
        const selectedLanguage = document.getElementById('languageGet').value;
        const codeExampleGet = codeExamplesGet[selectedLanguage] || 'No code example available for this language.';
        document.getElementById('codeExampleGet').textContent = codeExampleGet;
    }

    document.getElementById('languageGet').addEventListener('change', updateCodeExampleGet);
    updateCodeExampleGet();

    document.getElementById("codeExampleGet").textContent = codeExamplesGet["csharp-httpclient"];


    function updateCodeExample() {
        const selectedLanguage = document.getElementById('language').value;
        const codeExample = codeExamples[selectedLanguage] || 'No code example available for this language.';
        document.getElementById('codeExample').textContent = codeExample;
    }

    document.getElementById('language').addEventListener('change', updateCodeExample);
    updateCodeExample();

    document.getElementById("codeExample").textContent = codeExamples["csharp-httpclient"];


    function updateCodeExampleAdvanced() {
        const selectedLanguage = document.getElementById('languageAdvanced').value;
        const codeExampleAdvanced = codeExamplesAdvanced[selectedLanguage] || 'No code example available for this language.';
        document.getElementById('codeExampleAdvanced').textContent = codeExampleAdvanced;
    }

    document.getElementById('languageAdvanced').addEventListener('change', updateCodeExampleAdvanced);
    updateCodeExampleAdvanced();

    document.getElementById("codeExampleAdvanced").textContent = codeExamplesAdvanced["csharp-httpclient"];
</script>

<style>
    h3 {
        font-size: 18.5px;
        color: #94A3B8;
        top: 10px;
        position: relative;
    }

    p {
        font-size: 15px;
    }

    .container {
        margin: 0 auto;
        max-width: min(90%, 800px);
    }

    .sidebar {
        background-color: #0f172a;
        color: #f5f5f5;
        padding: 1rem;
        border-radius: 10px;
        position: relative;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    .centered-buttons {
      display: flex;
      justify-content: center; 
      gap: 10px; 
    }
    
    .postman-run-button, .insomnia-button {
      display: flex;
      align-items: center; 
    }

    .custom-button-container {
      display: flex;
      justify-content: center;
      gap: 10px;
    }
    
    .custom-button {
      display: flex;
      align-items: center;
      background-color: #7BC7C7;
      padding: 10px 20px;
      border-radius: 5px;
      text-align: center;
      border: none;
      cursor: pointer;
      text-decoration: none;
      color: white;
      font-weight: 700;
      font-size: 0.875rem;
    }

    .icon-container {
      background-color: #0F172A;

      top: 10px;
      position: sticky;
      padding: 15px;
      border-radius: 5px;
      font-size: 13px;
      overflow-x: auto;
      
    }

    .copy-icon {
      width: 20px;
      height: 20px;
      position: relative;
      float: right;
      right: 12.5%;
      top: 10px;
      cursor: pointer;
    }

    @keyframes pulse {
      0% {
        transform: scale(1);
        opacity: 1;
      }
      50% {
        transform: scale(1.1);
        opacity: 0.8;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }

    .pulse {
      animation: pulse 0.5s;
    }



    select {
        width: 98%;
        padding: 5px;
        margin-bottom: 10px;
        background: #0f172a;
        font-weight: 800;
        color: white;
        border: 2px #579CD6 solid;
        border-radius: 10px;
            color: white;
      }
    pre {
        background-color: #0f172a;
        color: #ecf0f1;
        padding: 15px;
        border-radius: 5px;
        font-size: 13px;
        padding-top: 40px;
        overflow-x: auto;         
    }

    .menu {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .menu-item {
        display: grid;
        grid-template-columns: 1fr 2fr 3fr; 
        gap: 1rem; 
        border-bottom: 1px solid #4a4a4a;
        margin-bottom: 0.5rem;
        padding-bottom: 0.5rem;
        align-items: center; 
    }

    .menu-item-base-url {
        display: grid;
        grid-template-columns: 1fr 2fr 3fr; 
        gap: 1rem; 
        align-items: center; 
    }

    .menu-item a {
        display: contents;
        color: #e0e0e0;
        text-decoration: none;
    }

    .menu-item a:hover {
        color: #ffffff;
    }

    .menu-item-base-url a {
        display: contents;
        color: #e0e0e0;
        text-decoration: none;
    }

    .menu-item-base-url a:hover {
        color: #ffffff;
    }

    .endpoint-get {
        background-color: #4FC9B0;
        color: white;
        font-weight: 900;
        border-radius: 4px;
        padding: 0.2rem 0.5rem;
        font-size: 0.8rem;
        text-align: center;
    }

    .base-url-button {
        background-color: #0f172a;
        color: white;
        font-weight: 900;
        border-radius: 4px;
        padding: 0.2rem 0.5rem;
        font-size: 0.8rem;
        text-align: center;
    }

    .endpoint-post {
        background-color: #579CD6;
        color: white;
        font-weight: 900;
        border-radius: 4px;
        padding: 0.2rem 0.5rem;
        font-size: 0.8rem;
        text-align: center;
    }

    .title {
        font-weight: bold;
        font-size: 1rem;
    }

    .path {
        font-size: 0.9rem;
        color: #e0e0e0;
        font-family: monospace; 
    }

    .documentation-content {
        margin: 0 auto;
    }

    .parameters-li-green {
        color: #51C9B0;
    }

    .parameters-li-blue {
        color: #579CD6;
    }

    .api-endpoint {
        margin-bottom: 3rem;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        padding: 2rem;
        max-width: 1000px; 
        margin: 0 auto;
    }

    .endpoint-title {
        font-size: 1.5rem;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
        color: #94A3B8;
    }

    .parameters-list {
        list-style: none;
        padding: 0;
        margin: 0;
        margin-bottom: 1rem;
    }

    .parameters-list li {
        margin-bottom: 0.5rem;
    }

    .highlight-method {
        font-weight: bold;
        color: #51C9B0; 
    }

    .highlight-endpoint {
        font-weight: bold;
        font-family: 'Courier New', Courier, monospace;
        color: #d9534f;
    }

    .highlight-description {
        color: #94A3B8;
    }
    

    .parameters-list li {
        margin-bottom: 0.5em;
        font-family: Arial, sans-serif;
        font-size: 14px;
        line-height: 1.5;
    }

    .response-example {
        background-color: transparent;
        padding: 10px;
        margin-top: 10px;
        font-family: 'Courier New', Courier, monospace;
    }


    .response-example {
        margin-bottom: 1rem;
    }

    .container-api {
            background-color: transparent;
            border-radius: 5px;
            padding: 20px;
            margin-bottom: 20px;
        }

    .json-content {
        text-wrap: wrap;
    }

    .example-json {
        margin-top: 10px;
        margin-left: 15px;
    }

    .json-example {
        color: white;
        font-size: 13px;
        background-color: #0f172a;
        border-radius: 12px;
        padding: 10px;
    }
    
    .url-api-get {
            font-weight: bold;
            color: #68CFB9;
        }


    .url-api-fast {
            font-weight: bold;
            color: #3498db;
        }


    .json-example {
        color: white;
        font-size: 13px;
        background-color: #0f172a;
        border-radius: 12px;
        padding: 10px;
    }

    @media only screen and (max-width: 600px) {
        .sidebar {
            max-width: 95%;
            margin: 0 auto;
        }
    }

    @media only screen and (max-width: 600px) {
        .menu-item .endpoint-get,
        .menu-item .endpoint-post,
        .menu-item .title,
        .menu-item .path {
            font-size: 0.8rem;
        }

        .menu-item-base-url .endpoint-get,
        .menu-item-base-url .endpoint-post,
        .menu-item-base-url .title,
        .menu-item-base-url .path {
            font-size: 0.8rem;
        }
    }
    @media only screen and (max-width: 500px) {
        .menu-item .path {
            word-wrap: break-word;
            overflow-wrap: break-word;
            white-space: normal;
            font-size: 0.7rem;
        }

        .menu-item-base-url .path {
            word-wrap: break-word;
            overflow-wrap: break-word;
            white-space: normal;
            font-size: 0.7rem;
        }
        
    }

    @media only screen and (max-width: 600px) {
    .menu-item .path {
        font-size: 0.6rem;
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: wrap;
        overflow: hidden; 
        text-overflow: ellipsis; 
        max-width: 100%;
    }

    .menu-item-base-url .path {
        font-size: 0.6rem;
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: wrap;
        overflow: hidden; 
        text-overflow: ellipsis; 
        max-width: 100%;
    }

    .container {
        margin-top: 3rem;
    }
}

@media screen and (min-width: 600px) {
  .copy-icon {
    right: 5%;
  }
}
</style>