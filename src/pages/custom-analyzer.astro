---
// Importaciones
import Layout from '../layouts/Layout.astro'
import Section from '../components/ui/Section.astro'
import Row from '../components/ui/Row.astro'
import Col from '../components/ui/Col.astro'
import { eq } from 'drizzle-orm';
import { db } from '../db';
import { sessions } from '../db/schema';

const sessionToken = Astro.cookies.get("app_auth_token")?.value;

if (!sessionToken) {
  return Astro.redirect("/login");
}

const userInfo = await db.query.sessions.findFirst({
  where: eq(sessions.id, sessionToken),
  with: {
    user: {
      columns: {
        email: true,
      },
    },
  },
});

const userEmail = userInfo?.user?.email || 'No email found';

interface ApiKey {
  name?: string;
  api_key: string;
  plan?: string;
  requests?: number;
  renewal_date?: string;
}

let apiKeysData: ApiKey[] = [];

if (userEmail !== 'No email found') {
  try {
    const response = await fetch(`https://analyzemydream-api-key.vercel.app/api_keys?email=${encodeURIComponent(userEmail)}`);
    const result = await response.json();
    
    if (response.ok) {
      apiKeysData = result.api_keys || [];

    } else {
      console.error('API Error:', result.error || 'An error occurred. Please try again.');
    }
  } catch (error) {
    console.error('Fetch Error:', error);
  }
}

const hasApiKeys = apiKeysData.length > 0;

function censorApiKey(apiKey: string): string {
  return `AMD_*****${apiKey.slice(-4)}`;
}

const SEO = {
  title: 'Analyze My Dream | Custom-AI Dream Analyzer',
  description: 'Personaliza el análisis de tus sueños con nuestra herramienta Custom-AI Dream Analyzer. Define tus propios parámetros y recibe un análisis adaptado a tus especificaciones.'
};

---
<Layout title={SEO.title} description={SEO.description}>
    <Section id="analyze-intro" padding="none" classes="bg-neutral-50 dark:bg-neutral-900">
        <Row>
            <Col span="2" />
            <Col span="8" align="center">
                <br>
                <br><h2 class="text-4xl font-semibold mb-4">Personaliza el análisis de tus sueños con <strong>Custom-AI Dream Analyzer</strong>.</h2>
                <label for="dreamDescription" class="block text-lg font-medium mb-2">
                    Establece tus propios parámetros y obtén un análisis a medida basado en tus preferencias específicas.
                </label>
            </Col>
            
        </Row>
    </Section>

    <Section id="dream-form" padding="none" classes="bg-neutral-50 dark:bg-neutral-900">
        {hasApiKeys ? (
        <Row>
            <Col span="2" />
            <Col span="8" align="center">
                <form id="dreamForm" class="space-y-4">
                    <p class="text-sm text-gray-500 dark:text-gray-300 mb-4">
                        Usa esta herramienta de manera responsable. Los resultados están destinados únicamente para orientación general. <strong><a href="/faq" style="color: #7BC7C7; text-decoration: none;">Más información.</a></strong>
                    </p>
                    <div id="customParamsContainer">
                        <h3 class="text-lg font-medium mb-2">Añadir Parámetros Personalizados</h3>
                        <div class="customParamsWrapper">
                            <input type="text" placeholder="Nombre del Parámetro" class="customParamName p-2 border rounded" />
                            <input type="text" placeholder="Valor del Parámetro" class="customParamValue p-2 border rounded" />
                            <button type="button" id="addCustomParam" class="addCustomParamButton">Añadir</button>
                        </div>
                    </div>
                   
                    <p class="text-sm text-gray-500 dark:text-gray-300 mb-4">
                        Ingresa una descripción detallada de tu sueño y crea tus propios parámetros; nuestra IA generará un análisis exhaustivo basado en tus especificaciones.
                    </p>
                    <select id="apiKeySelect" name="apiKey" class="w-full p-2 border border-gray-300 rounded" style="background-color: transparent; width: 95%; border-radius: 10px; text-align: center;">
                    {apiKeysData.map((apiKey) => (
                        <option value={apiKey.api_key}>
                        {apiKey.plan ? `${apiKey.plan} Plan` : 'Sin Plan'} - 
                        Solicitudes: {apiKey.requests ? apiKey.requests : 'Sin datos'} - {censorApiKey(apiKey.api_key)}
                        </option>
                    ))}
                    </select>
                    <div class="p-4 bg-white dark:bg-neutral-800 shadow-md rounded-lg space-y-4" style="border-radius:20px;">
                        <textarea id="dreamDescription" name="dreamDescription" style="background:transparent; border-radius:10px;" rows="6" cols="50" minlength="30" required class="w-full p-2 border border-gray-300 rounded" placeholder="Ingresa una descripción detallada de tu sueño..."></textarea>
    
                        <div id="customParamsList" class="custom-params-list">
                            <!-- Los parámetros personalizados añadidos por el usuario aparecerán aquí -->
                        </div>
                    </div>
                    
                    <div class="flex justify-center space-x-4 mt-4">
                        <button id="analyzeButton" type="submit" class="relative flex items-center justify-center text-white py-2 px-4 rounded-lg hover:bg-blue-600" style="background-color: rgba(123, 199, 199, var(--tw-bg-opacity));">
                            <span id="buttonText" style="font-weight: 700; font-size: 0.875rem;">Analizar</span>
                        </button>
                    </div>
                </form>
    
                <div id="analysisResult" class="mt-4 text-lg font-medium"></div>
            </Col>
            <Col span="2" />
        </Row>
        <br>
        ) : (
        <div style="text-align:center;">
            <br>
          <p class="text-gray-700 dark:text-gray-300">Parece que no tienes <strong>claves API</strong> disponibles en este momento.</p>
          <p class="text-gray-700 dark:text-gray-300">Para desbloquear el acceso completo, considera seleccionar un plan que se ajuste a tus necesidades.</p>
          <div class="flex justify-center">
            <a href="/pricing" class="w-52 flex items-center justify-center text-white py-2 px-4 rounded-lg hover:bg-blue-600" style="background-color: rgba(123, 199, 199, var(--tw-bg-opacity));">Explorar Planes</a>
          </div>
        </div>
        <br>
        )}
    </Section>
    <br>
</Layout>

<script>
document.getElementById('dreamForm')?.addEventListener('submit', async (event) => {
    event.preventDefault();
    const apiKeySelect = document.getElementById('apiKeySelect') as HTMLSelectElement;
    const analyzeButton = document.getElementById('analyzeButton') as HTMLButtonElement;
    const buttonText = document.getElementById('buttonText') as HTMLSpanElement;
    const dreamDescription = (document.getElementById('dreamDescription') as HTMLTextAreaElement)?.value;
    const analysisResult = document.getElementById('analysisResult') as HTMLDivElement;

    if (!analyzeButton || !apiKeySelect) {
        console.error('Analysis result element not found.');
        return;
    }

    const customParams: { [key: string]: string } = {};
    document.querySelectorAll('#customParamsList li').forEach(item => {
        const paramName = (item.querySelector('.paramName') as HTMLElement)?.textContent || '';
        const paramValue = (item.querySelector('.paramValue') as HTMLElement)?.textContent || '';
        customParams[paramName] = paramValue;
    });

    const requestBody = {
        description: {
            dream_description: dreamDescription,
            lang: 'es'
        },
        custom_params: {
            parameters: customParams
        }
    };

    buttonText.textContent = 'Analizando...';
    analyzeButton.disabled = true;
    const selectedApiKey = apiKeySelect.value;

    try {
        const response = await fetch(`https://analyzemydream-api.vercel.app/custom-analyzer/${selectedApiKey}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestBody),
        });

        const result = await response.json();
        if (response.ok) {
            analysisResult.innerHTML = convertMarkdownToHtml(result.analysis);
            buttonText.textContent = 'Try Again';
        } else {
            analysisResult.textContent = result.error;
            buttonText.textContent = 'Analyze Your Dream';
        }

    } catch (error) {
        analysisResult.textContent = 'An error occurred. Please try again.';
        buttonText.textContent = 'Analyze Your Dream';
    } finally {
        analyzeButton.disabled = false;
    }
});

document.getElementById('addCustomParam')?.addEventListener('click', () => {
    const paramName = (document.querySelector('.customParamName') as HTMLInputElement)?.value.trim();
    const paramValue = (document.querySelector('.customParamValue') as HTMLInputElement)?.value.trim();

    if (paramName && paramValue) {
        const customParamsList = document.getElementById('customParamsList');

        if (customParamsList) {
            if (!customParamsList.querySelector('#paramsHeader')) {
                const header = document.createElement('span');
                header.id = 'paramsHeader';
                header.innerHTML = '<strong>Parámetros añadidos:</strong>';
                header.style.display = 'block';
                header.style.textAlign = 'center';
                customParamsList.insertAdjacentElement('beforebegin', header);
            }

            const li = document.createElement('li');
            li.innerHTML = `<span class="paramName">${paramName}</span>: <span class="paramValue">${paramValue}</span>`;
            customParamsList.appendChild(li);
        }

        (document.querySelector('.customParamName') as HTMLInputElement).value = '';
        (document.querySelector('.customParamValue') as HTMLInputElement).value = '';
    }
});

function convertMarkdownToHtml(markdown: string): string {
    let html = markdown
        .replace(/(Dream Analysis:|Disclaimer:)/g, '<span style="color: #7BC7C7;">$1</span>')
        .replace(/\*\*(.*?)\*\*/g, '<span class="ia-subtitle" style="color: #7BC7C7;">$1</span> ')
        .replace(/\*(.*?)\*/g, ' <em class="ia-text">$1</em> ')
        .replace(/(?:^|\n)\* (.*?)(?=\n|$)/g, '<li class="ia-list" style="color: #94A3B8;">- $1</li>')
        .replace(/\n/g, '<br/>');
    html = html.replace(/(<li[^>]*>.*?<\/li>)(?=<li|$)/g, '<ul>$1</ul>');
    html = html.replace(/(?:<br\/>)+/g, '</p><p>').replace(/(^<br\/>)+|(<br\/>)+$/g, '').replace(/(^|\n)(?!<p>)(.*?)(?=\n|$)/g, '<p>$2</p>');

    return html;
}

</script>
<style>
    .tabs-container {
      margin-bottom: 20px;
    }
    
    .tab-item {
      display: inline-block;
      text-align: center;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s, border-color 0.3s;
      font-size: 16px;
    }
    
    .tab-item.active {
      background-color: #7BC7C7;
      color: white;
    }
    
    .tab-item:hover {
      background-color: rgba(123, 199, 199, 0.2);
      border-color: #7BC7C7;
    }

    #customParamsContainer {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
    

    .customParamsWrapper {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        gap: 0.5rem;
        justify-content: center;
        align-items: center;
    }

    .customParamsWrapper input {
        flex: 1;
        background-color: transparent;
        max-width: 200px;
    }

    .addCustomParamButton {
        background-color: rgba(123, 199, 199, var(--tw-bg-opacity));
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .addCustomParamButton:hover {
        background-color: rgba(103, 178, 178, var(--tw-bg-opacity));
    }

    .custom-params-list {
        margin-top: 1rem;
        padding-left: 0;
        color: #94A3B8;
    }

    .custom-params-list div {
        margin-bottom: 0.5rem;
    }

    .custom-params-list .param-item {
        display: flex;
        align-items: center;
    }

    .custom-params-list .param-item::before {
        content: "-";
        margin-right: 0.5rem;
    }

    @media (max-width: 600px) {
        .customParamsWrapper {
            flex-direction: column;
            align-items: center;
        }

        .addCustomParamButton {
            margin-top: 1rem;
        }
    }

    @media (prefers-color-scheme: dark) {
      .tab-item {
        color: #94A3B8;
      }
    }

    @media (max-width: 1024px) {
    .tabs {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
    }

    .tab-item {
        flex: 1 1 calc(33.333% - 10px);
        margin-bottom: 10px;
        text-align: center;
    } 
  }
</style>
