---
import Layout from '../layouts/Layout.astro';
import Section from '../components/ui/Section.astro';
import Row from '../components/ui/Row.astro';
import Col from '../components/ui/Col.astro';
import { eq } from 'drizzle-orm';
import { db } from '../db';
import { sessions } from '../db/schema';

const sessionToken = Astro.cookies.get("app_auth_token")?.value;

if (!sessionToken) {
  return Astro.redirect("/login");
}

const userInfo = await db.query.sessions.findFirst({
  where: eq(sessions.id, sessionToken),
  with: {
    user: {
      columns: {
        email: true,
      },
    },
  },
});

const userEmail = userInfo?.user?.email || 'No email found';

interface ApiKey {
  name?: string;
  api_key: string;
  plan?: string;
  requests?: number;
  renewal_date?: string;
}

let apiKeysData: ApiKey[] = [];

if (userEmail !== 'No email found') {
  try {
    const response = await fetch(`https://analyzemydream-api-key.vercel.app/api_keys?email=${encodeURIComponent(userEmail)}`);
    const result = await response.json();
    
    if (response.ok) {
      apiKeysData = result.api_keys || [];

    } else {
      console.error('API Error:', result.error || 'An error occurred. Please try again.');
    }
  } catch (error) {
    console.error('Fetch Error:', error);
  }
}

const hasApiKeys = apiKeysData.length > 0;

function censorApiKey(apiKey: string): string {
  return `AMD_*****${apiKey.slice(-4)}`;
}

const SEO = {
  title: 'Analyze My Dream | Fast-AI Dream Analyzer',
  description: 'Unlock insights with our Fast-AI Dream Analyzer tool',
};

---
<Layout title={SEO.title} description={SEO.description}>
  <Section id="dream-form" padding="none" classes="bg-neutral-50 dark:bg-neutral-900">
    <Row>
      <Col span="2" />
      <Col span="8" align="center">
        <br><h3 class="text-3xl font-semibold mb-4">Unlock Insights Instantly with our <strong>Fast-AI Dream Analyzer</strong> tool.</h3>
        
        {hasApiKeys ? (
          <p class="text-sm text-gray-500 dark:text-gray-300 mb-4">
            Please use this tool responsibly. The results are intended for general guidance only. <strong><a href="/faq" style="color: #7BC7C7; text-decoration: none;">Learn More.</a></strong>
          </p> 
          <form id="dreamForm" class="space-y-4">
            <select id="apiKeySelect" name="apiKey" class="w-full p-2 border border-gray-300 rounded" style="background-color: transparent; width: 95%; border-radius: 10px; text-align: center;">
              {apiKeysData.map((apiKey) => (
                <option value={apiKey.api_key}>
                  {apiKey.plan ? `${apiKey.plan} Plan` : 'No Plan'} - 
                  Requests: {apiKey.requests ? apiKey.requests : 'No data'} - {censorApiKey(apiKey.api_key)}
                </option>
              ))}
            </select>
            
            <textarea id="dreamDescription" name="dreamDescription" style="background:transparent; border-radius:10px;" rows="4" cols="50" minlength="30" required class="w-full p-2 border border-gray-300 rounded" placeholder="Enter a detailed description of your dream..."></textarea>
            
            <div class="flex justify-center space-x-4 mt-4">
              <button id="analyzeButton" type="submit" class="relative flex items-center justify-center text-white py-2 px-4 rounded-lg hover:bg-blue-600" style="background-color: rgba(123, 199, 199, var(--tw-bg-opacity));">
                <span id="buttonText" style="font-weight: 700; font-size: 0.875rem;">Analyze My Dream</span>
              </button>
            </div>
            <br>
            <p id="analysisResult" class="mt-4" style="text-align: justify;"></p>
          </form>
        ) : (
        <div>
          <p class="text-gray-700 dark:text-gray-300">It seems you don't have any <strong>API keys</strong> available at the moment.</p>
          <p class="text-gray-700 dark:text-gray-300">To unlock full access, please consider selecting a plan that suits your needs.</p>
          <div class="flex justify-center">
            <a href="/pricing" class="w-52 flex items-center justify-center text-white py-2 px-4 rounded-lg hover:bg-blue-600" style="background-color: rgba(123, 199, 199, var(--tw-bg-opacity));">Explore Plans</a>
          </div>
        </div>
        <br>
        )}
      </Col>
      <Col span="2" />
    </Row>
  </Section>
</Layout>

<script type="module">
  document.addEventListener('astro:page-load', () => {
    const dreamForm = document.getElementById('dreamForm');
    const analyzeButton = document.getElementById('analyzeButton');
    const buttonText = document.getElementById('buttonText');
    const apiKeySelect = document.getElementById('apiKeySelect');
    const dreamDescription = document.getElementById('dreamDescription');
    const analysisResult = document.getElementById('analysisResult');

    dreamForm?.addEventListener('submit', async (event) => {
      event.preventDefault();

      if (!analyzeButton || !buttonText || !dreamDescription || !apiKeySelect || !analysisResult) {
        console.error('One or more elements are missing.');
        return;
      }

      buttonText.textContent = 'Analyzing...';
      analyzeButton.disabled = true;

      const selectedApiKey = apiKeySelect.value;

      try {
        const response = await fetch(`https://analyzemydream-api.vercel.app/analyzer/${selectedApiKey}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            dream_description: dreamDescription.value,
            lang: 'en',
          }),
        });

        const result = await response.json();
        
        if (response.ok) {
          analysisResult.innerHTML = `<strong>Fast-AI Dream Analysis:</strong> ${result.analysis}`;
          buttonText.textContent = 'Try Again';
        } else {
          analysisResult.textContent = result.error || 'An error occurred. Please try again.';
          buttonText.textContent = 'Analyze Your Dream';
        }
      } catch (error) {
        analysisResult.textContent = 'An error occurred. Please try again.';
        buttonText.textContent = 'Analyze Your Dream';
      } finally {
        analyzeButton.disabled = false;
      }
    });

        function handleClearInput() {
            dreamDescription.value = '';
            analysisResult.textContent = '';
            buttonText.textContent = 'Analyze Your Dream';
            comprehensiveAnalysisLabel.classList.add('hidden'); 
            analyzeButton.removeEventListener('click', handleClearInput);
            analyzeButton.addEventListener('click', handleFormSubmit);
        }

        function handleFormSubmit() {
            document.getElementById('dreamForm').dispatchEvent(new Event('submit'));
        }
    });
</script>

<style>
    .tabs-container {
      margin-bottom: 20px;
    }
    
    .tab-item {
      display: inline-block;
      text-align: center;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s, border-color 0.3s;
      font-size: 16px;
    }
    
    .tab-item.active {
      background-color: #7BC7C7;
      color: white;
    }
    
    .tab-item:hover {
      background-color: rgba(123, 199, 199, 0.2);
      border-color: #7BC7C7;
    }
    
    @media (prefers-color-scheme: dark) {
      .tab-item {
        color: #94A3B8;
      }
    }


    @media (max-width: 1024px) {
    .tabs {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 10px;
    }

    .tab-item {
        flex: 1 1 calc(33.333% - 10px);
        margin-bottom: 10px;
        text-align: center;
    } 
  }
</style>